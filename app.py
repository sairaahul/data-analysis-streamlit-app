# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10q5wl9Y-sGNCf01lmZZQqZzD2vMTgrdl
"""

!pip install streamlit
import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

st.set_page_config(page_title="Advanced Data Analyzer", layout="wide")

st.title("ðŸ“Š Advanced Data Analyzer")

uploaded_file = st.file_uploader("Upload your data file (CSV, Excel, or JSON)", type=['csv', 'xlsx', 'json'])

if uploaded_file:
    # Load Data
    try:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith('.xlsx'):
            df = pd.read_excel(uploaded_file)
        elif uploaded_file.name.endswith('.json'):
            df = pd.read_json(uploaded_file)
        else:
            st.error("Unsupported file format.")
            st.stop()
    except Exception as e:
        st.error(f"Error loading file: {e}")
        st.stop()

    st.header("Raw Data Preview")
    st.dataframe(df.head())

    # Data Cleaning
    st.subheader("Data Cleaning")
    null_thresh = st.slider("Max allowed % nulls per column", 0, 100, 50)
    df_clean = df.loc[:, df.isnull().mean() < null_thresh/100]

    # Remove columns with only one unique value
    df_clean = df_clean.loc[:, df_clean.nunique() > 1]

    # Fill remaining nulls
    for col in df_clean:
        if df_clean[col].dtype in [np.float64, np.int64]:
            df_clean[col] = df_clean[col].fillna(df_clean[col].mean())
        else:
            df_clean[col] = df_clean[col].fillna(df_clean[col].mode()[0])

    st.write("Cleaned Data Sample:")
    st.dataframe(df_clean.head())

    # Descriptive Statistics
    st.subheader("Descriptive Statistics")
    stats = df_clean.describe(include='all').T
    st.dataframe(stats)

    # Visualization
    st.subheader("Automatic Visualization")
    numeric_cols = df_clean.select_dtypes(include=np.number).columns.tolist()
    categorical_cols = df_clean.select_dtypes(exclude=np.number).columns.tolist()

    if len(numeric_cols) == 1:
        st.write(f"Histogram for {numeric_cols[0]}")
        fig = px.histogram(df_clean, x=numeric_cols[0])
        st.plotly_chart(fig, use_container_width=True)
    elif len(numeric_cols) == 2:
        st.write(f"Scatter plot: {numeric_cols[0]} vs {numeric_cols[1]}")
        fig = px.scatter(df_clean, x=numeric_cols[0], y=numeric_cols[1])
        st.plotly_chart(fig, use_container_width=True)
    elif categorical_cols and numeric_cols:
        st.write(f"Boxplot: {numeric_cols[0]} by {categorical_cols[0]}")
        fig = px.box(df_clean, x=categorical_cols[0], y=numeric_cols[0])
        st.plotly_chart(fig, use_container_width=True)
    elif len(numeric_cols) > 2:
        st.write("Pairplot for numeric columns")
        fig = sns.pairplot(df_clean[numeric_cols])
        st.pyplot(fig)
    else:
        st.write("Not enough data for visualization.")

    # Statistical Interpretation
    st.subheader("Statistical Interpretation")
    st.write("**Mean values:**")
    st.write(df_clean[numeric_cols].mean())
    st.write("**Standard deviations:**")
    st.write(df_clean[numeric_cols].std())
    st.write("**Correlation matrix:**")
    st.dataframe(df_clean[numeric_cols].corr())
    st.info("Look for high correlations, skewness, and outliers for deeper insights. For further analysis, consider hypothesis testing or clustering.")

else:
    st.info("Please upload a data file to begin analysis.")