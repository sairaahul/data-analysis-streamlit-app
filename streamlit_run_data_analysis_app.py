# -*- coding: utf-8 -*-
"""streamlit run data_analysis_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17ZQaIyFf63gZ7f3vfARDuMZ5JmcPm3-r
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def main():
    st.title("Step-by-Step Data Analysis App")

    st.write("""
        This app performs data analysis on the uploaded dataset.

        Steps followed:
        1. Data Cleaning
        2. Data Analysis
        3. Descriptive Summary Statistics
        4. Visualizations with interpretations
    """)

    uploaded_file = st.file_uploader("Upload your CSV data file", type=["csv"])
    if uploaded_file is not None:
        try:
            # Step 1: Data Cleaning
            data = pd.read_csv(uploaded_file)

            st.subheader("Original Data")
            st.dataframe(data)

            # Basic Cleaning: remove duplicate rows and handle missing values
            data_cleaned = data.drop_duplicates()

            st.subheader("Data Cleaning")
            st.write("Duplicates removed.")

            # Handling missing values - show missing data count
            missing_counts = data_cleaned.isnull().sum()
            st.write("Missing values count per column:")
            st.write(missing_counts)

            # Fill missing numeric values with median, categorical with mode
            for col in data_cleaned.columns:
                if data_cleaned[col].dtype in [np.float64, np.int64]:
                    median_val = data_cleaned[col].median()
                    data_cleaned[col].fillna(median_val, inplace=True)
                else:
                    mode_val = data_cleaned[col].mode()
                    if len(mode_val) > 0:
                        data_cleaned[col].fillna(mode_val[0], inplace=True)

            st.write("Missing values filled with median (numeric) or mode (categorical).")

            st.subheader("Cleaned Data")
            st.dataframe(data_cleaned)

            # Step 2 & 3: Data Analysis and Descriptive Summary Stats
            st.subheader("Descriptive Summary Statistics")

            desc_stats = data_cleaned.describe(include='all').T
            st.dataframe(desc_stats)

            # Step 4: Visualizations
            st.subheader("Visualizations")

            # Select columns for visualization
            numerical_cols = data_cleaned.select_dtypes(include=[np.number]).columns.tolist()
            categorical_cols = data_cleaned.select_dtypes(include=['object', 'category']).columns.tolist()

            viz_option = st.selectbox(
                "Choose visualization type",
                ["Histogram", "Box Plot", "Scatter Plot", "Bar Plot", "Correlation Heatmap"]
            )

            if viz_option == "Histogram":
                if len(numerical_cols) == 0:
                    st.write("No numerical columns available for histogram.")
                else:
                    col = st.selectbox("Select numerical column for histogram", numerical_cols)
                    bins = st.slider("Number of bins", 5, 100, 20)
                    plt.figure(figsize=(8, 5))
                    sns.histplot(data_cleaned[col], bins=bins, kde=True, color='skyblue')
                    plt.title(f'Histogram of {col}')
                    plt.xlabel(col)
                    plt.ylabel('Frequency')
                    st.pyplot(plt)
                    st.write(f"Interpretation: The histogram of '{col}' shows the distribution of the data points with the frequency of observations within bins. Peaks indicate where values are concentrated.")

            elif viz_option == "Box Plot":
                if len(numerical_cols) == 0:
                    st.write("No numerical columns available for box plot.")
                else:
                    col = st.selectbox("Select numerical column for box plot", numerical_cols)
                    plt.figure(figsize=(8, 5))
                    sns.boxplot(x=data_cleaned[col], color='lightgreen')
                    plt.title(f'Box Plot of {col}')
                    plt.xlabel(col)
                    st.pyplot(plt)
                    st.write(f"Interpretation: The box plot of '{col}' displays the data distribution with median, quartiles, and potential outliers.")

            elif viz_option == "Scatter Plot":
                if len(numerical_cols) < 2:
                    st.write("Need at least two numerical columns for scatter plot.")
                else:
                    x_col = st.selectbox("Select X-axis numerical column", numerical_cols)
                    y_col = st.selectbox("Select Y-axis numerical column", [col for col in numerical_cols if col != x_col])
                    plt.figure(figsize=(8, 5))
                    sns.scatterplot(x=data_cleaned[x_col], y=data_cleaned[y_col], hue=None, palette='viridis')
                    plt.title(f'Scatter Plot of {y_col} vs {x_col}')
                    plt.xlabel(x_col)
                    plt.ylabel(y_col)
                    st.pyplot(plt)
                    st.write(f"Interpretation: The scatter plot shows relationship or correlation between '{x_col}' and '{y_col}'.")

            elif viz_option == "Bar Plot":
                if len(categorical_cols) == 0:
                    st.write("No categorical columns available for bar plot.")
                else:
                    cat_col = st.selectbox("Select categorical column for bar plot", categorical_cols)
                    plt.figure(figsize=(8, 5))
                    order = data_cleaned[cat_col].value_counts().index
                    sns.countplot(x=data_cleaned[cat_col], order=order, palette='pastel')
                    plt.title(f'Bar Plot of {cat_col}')
                    plt.xlabel(cat_col)
                    plt.ylabel('Count')
                    plt.xticks(rotation=45)
                    st.pyplot(plt)
                    st.write(f"Interpretation: The bar plot shows the count of each category in '{cat_col}'.")

            elif viz_option == "Correlation Heatmap":
                if len(numerical_cols) < 2:
                    st.write("Need at least two numerical columns for correlation heatmap.")
                else:
                    plt.figure(figsize=(10, 8))
                    corr = data_cleaned[numerical_cols].corr()
                    sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f")
                    plt.title('Correlation Heatmap')
                    st.pyplot(plt)
                    st.write(f"Interpretation: The heatmap shows correlation coefficients between numerical variables. Values near 1 or -1 indicate strong positive or negative relationships.")

        except Exception as e:
            st.error(f"Error processing the file: {e}")

if __name__ == "__main__":
    main()