# -*- coding: utf-8 -*-
"""sunfan app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iraz31F8gfzMi0kCorAWnfZm5bYX26Pe
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# --- Data Loading and Preprocessing ---
@st.cache_data  # Cache the data loading to improve performance
def load_and_preprocess_data(file_path):
    """Loads the data, handles missing values, and converts 'Date' to datetime."""
    df = pd.read_csv(file_path)

    # Handle missing values (replace with 0 or a more appropriate value)
    df.fillna(0, inplace=True)  # Replace NaN with 0

    # Convert 'Date' column to datetime objects
    df['Date'] = pd.to_datetime(df['Date'])

    return df

# --- Data Visualization Functions ---
def create_line_chart(df, x_col, y_col, title, x_label, y_label):
    """Creates a line chart."""
    fig, ax = plt.subplots(figsize=(10, 6))  # Adjust figure size
    sns.lineplot(x=x_col, y=y_col, data=df, ax=ax)
    ax.set_title(title)
    ax.set_xlabel(x_label)
    ax.set_ylabel(y_label)
    ax.tick_params(axis='x', rotation=45)  # Rotate x-axis labels for readability
    return fig

def create_scatter_plot(df, x_col, y_col, title, x_label, y_label):
    """Creates a scatter plot."""
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.scatterplot(x=x_col, y=y_col, data=df, ax=ax)
    ax.set_title(title)
    ax.set_xlabel(x_label)
    ax.set_ylabel(y_label)
    return fig

def create_histogram(df, column, title, x_label, y_label):
    """Creates a histogram."""
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.histplot(df[column], ax=ax, kde=True)  # Add KDE for density estimation
    ax.set_title(title)
    ax.set_xlabel(x_label)
    ax.set_ylabel(y_label)
    return fig

# --- Main Streamlit App ---
def main():
    st.title("Data Visualization App")

    # File Upload
    uploaded_file = st.file_uploader("Upload your CSV file", type=["csv"])

    if uploaded_file is not None:
        # Load and preprocess the data
        df = load_and_preprocess_data(uploaded_file)

        # Display the DataFrame
        st.subheader("Data Preview:")
        st.dataframe(df.head())  # Show only the first few rows

        # --- Data Visualization Options ---
        st.subheader("Data Visualization Options:")

        # Line Chart
        st.write("---")
        st.subheader("Line Chart")
        x_column_line = st.selectbox("Select x-axis column for line chart:", df.columns)
        y_column_line = st.selectbox("Select y-axis column for line chart:", df.columns)
        if st.button("Generate Line Chart"):
            line_chart = create_line_chart(df, x_column_line, y_column_line,
                                            f"Line Chart of {y_column_line} vs {x_column_line}",
                                            x_column_line, y_column_line)
            st.pyplot(line_chart)

        # Scatter Plot
        st.write("---")
        st.subheader("Scatter Plot")
        x_column_scatter = st.selectbox("Select x-axis column for scatter plot:", df.columns)
        y_column_scatter = st.selectbox("Select y-axis column for scatter plot:", df.columns)
        if st.button("Generate Scatter Plot"):
            scatter_plot = create_scatter_plot(df, x_column_scatter, y_column_scatter,
                                                f"Scatter Plot of {y_column_scatter} vs {x_column_scatter}",
                                                x_column_scatter, y_column_scatter)
            st.pyplot(scatter_plot)

        # Histogram
        st.write("---")
        st.subheader("Histogram")
        histogram_column = st.selectbox("Select column for histogram:", df.columns)
        if st.button("Generate Histogram"):
            histogram = create_histogram(df, histogram_column,
                                          f"Histogram of {histogram_column}",
                                          histogram_column, "Frequency")
            st.pyplot(histogram)

if __name__ == "__main__":
    main()